// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Club {
  id        String   @id @default(cuid())
  name      String
  city      String
  country   String
  logo      String?
  email     String?
  phone     String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  players  Player[]
  contacts Contact[]

  @@map("clubs")
}

model Player {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  age         Int
  position    String
  nationality String
  photo       String?
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clubId   String
  club     Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  contacts Contact[]

  @@map("players")
}

enum ContactType {
  CLUB
  PLAYER
}

model Contact {
  id        String      @id @default(cuid())
  firstName String
  lastName  String
  role      String
  email     String?
  phone     String?
  type      ContactType
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations (optional - contact can be related to either club or player)
  clubId   String?
  club     Club?   @relation(fields: [clubId], references: [id], onDelete: Cascade)
  playerId String?
  player   Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  // Prospect relation
  prospects Prospect[]

  @@map("contacts")
}

enum ProspectStage {
  prequalification
  relance1
  relance2
  relance3
}

model Prospect {
  id        String        @id @default(cuid())
  stage     ProspectStage @default(prequalification)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("prospects")
}
